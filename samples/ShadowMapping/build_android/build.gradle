apply plugin: 'com.android.application'
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
	repositories {
		mavenCentral()
	}
	
	dependencies {
		classpath 'com.android.tools.build:gradle:1.5.0'
	}
}

def getNdkBuildPath() {
	if(Os.isFamily(Os.FAMILY_WINDOWS)) {
		return System.getenv('ANDROID_NDK') + '\\ndk-build.cmd'
	} else {
		return System.getenv('ANDROID_NDK') + '/ndk-build'
	}
}

project.afterEvaluate {
	compileDebugNdk.dependsOn 'ndkBuildDebug'
	compileReleaseNdk.dependsOn 'ndkBuildRelease'
	clean.dependsOn 'ndkCleanDebug'
	clean.dependsOn 'ndkCleanRelease'
}

android {
	compileSdkVersion 'android-24'
	buildToolsVersion '24.0.3'
	
	defaultConfig {
		minSdkVersion 19
		targetSdkVersion 24
	}

	buildTypes {
		debug {
			debuggable true
			jniDebuggable true
		}
		release {
			proguardFile getDefaultProguardFile('proguard-android.txt')
		}
	}
	
	sourceSets.main {
		java.srcDirs = [ '../../../src/android/java' ]
		assets.srcDirs = [ '../data' ]
		jni.srcDirs = []
		jniLibs.srcDir 'src/main/libs'
	}
	
	task ndkBuildDebug(type: Exec) {
		commandLine getNdkBuildPath(), '-C', file('src/main').absolutePath, '-j', Runtime.runtime.availableProcessors(), 'NDK_DEBUG=1'
	}
	
	task ndkBuildRelease(type: Exec) {
		commandLine getNdkBuildPath(), '-C', file('src/main').absolutePath, '-j', Runtime.runtime.availableProcessors(), 'NDK_DEBUG=0'
	}
	
	task ndkCleanDebug(type: Exec) {
		commandLine getNdkBuildPath(), '-C', file('src/main').absolutePath, 'clean', 'NDK_DEBUG=1'
	}
	
	task ndkCleanRelease(type: Exec) {
		commandLine getNdkBuildPath(), '-C', file('src/main').absolutePath, 'clean', 'NDK_DEBUG=0'
	}
}
